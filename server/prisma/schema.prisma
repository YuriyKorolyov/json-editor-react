generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  createdAt  DateTime @default(now())
  isEnabled  Boolean  @default(true)

  widgets    Widget[]
}

model Widget {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  secret     String
  createdAt  DateTime @default(now())
  isEnabled  Boolean  @default(true)

  clientId   String   @db.Uuid
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  users      User[]
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  email      String?  @unique
  name       String?
  createdAt  DateTime @default(now())
  isEnabled  Boolean  @default(true)

  widgetId   String   @db.Uuid
  widget     Widget   @relation(fields: [widgetId], references: [id], onDelete: Cascade)

  jsonDocuments JsonDocument[]
  jsonSchemas   JsonSchema[]
}

model JsonDocument {
  id         String   @id @default(uuid()) @db.Uuid
  title      String?
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  schemaId   String   @unique @db.Uuid
  schema     JsonSchema @relation("DocumentSchema", fields: [schemaId], references: [id], onDelete: Cascade)

  @@unique([userId, title], name: "userId_title")
}

model JsonSchema {
  id         String   @id @default(uuid()) @db.Uuid
  schema     Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  document   JsonDocument? @relation("DocumentSchema")
}
